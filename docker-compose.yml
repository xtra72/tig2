version: "3.7"

services:
  chirpstack:
    image: chirpstack/chirpstack:4
    container_name: chirpstack
    hostname: chirpstack
    command: -c /etc/chirpstack
    restart: unless-stopped
    volumes:
      - ./setup/chirpstack:/etc/chirpstack
      - ./lorawan-devices:/opt/lorawan-devices
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - REDIS_HOST=redis
      - POSTGRESQL_HOST=postgres
    depends_on:
      - postgres
      - mosquitto
      - redis
    ports:
      - 8080:8080

  chirpstack-gateway-bridge:
    image: chirpstack/chirpstack-gateway-bridge:4
    container_name: chirpstack-gateway-bridge
    hostname: chirpstack-gateway-bridge
    restart: unless-stopped
    volumes:
      - ./setup/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    environment:
      - MQTT_BROKER_HOST=mosquitto
    depends_on:
      - mosquitto
    ports:
      - 1700:1700/udp
    networks:
      - default

  chirpstack-rest-api:
    image: chirpstack/chirpstack-rest-api:4
    container_name: chirpstack-rest-api
    hostname: chirpstack-rest-api
    restart: unless-stopped
    command: --server chirpstack:8080 --bind 0.0.0.0:8090 --insecure
    depends_on:
      - chirpstack
    ports:
      - 8090:8090
    networks:
      - default

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    user: ${TIG_USER_ID}:${TIG_GROUP_ID}
    restart: always
    volumes:
      - ./etc/mosquitto:/mosquitto/config:rw
      - ./var/lib/mosquitto:/mosquitto/data:rw
      - ./var/log/mosquitto:/mosquitto/log:rw
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - default

  node-red:
    build: ./setup/node-red
    container_name: node-red
    hostname: node-red
    user: ${TIG_USER_ID}:${TIG_GROUP_ID}
    restart: always
    volumes:
      - ./var/lib/node-red:/data:rw
    ports:
      - "1880:1880"
    networks:
      - default

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    hostname: influxdb
    user: ${TIG_USER_ID}:${TIG_GROUP_ID}
    restart: always
    volumes:
      - ./var/lib/influxdb:/var/lib/influxdb
      - ./etc/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ./etc/influxdb/initdb.d:/docker-entrypoint-initdb.d
    environment:
      - INFLUXDB_HTTP_AUTH_ENABLED
      - INFLUXDB_ADMIN_USER
      - INFLUXDB_ADMIN_PASSWORD
      - HOME=/var/lib/influxdb
    ports:
      - "8086:8086"
    networks:
      - default

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    volumes:
      - ./setup/postgresql/initdb:/docker-entrypoint-initdb.d
      - ./var/lib/postgresql/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=root
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    user: ${TIG_USER_ID}:${TIG_GROUP_ID}
    restart: unless-stopped
    volumes:
      - ./var/lib/redis/data:/data:rw
    ports:
      - "6379:6379"

  telegraf:
    image: telegraf
    container_name: telegraf
    hostname: telegraf
    user: ${TIG_USER_ID}:${TIG_GROUP_ID}
    command:
      - telegraf
      - --config-directory
      - ${TELEGRAF_CONFIG_DIRECTORY}
    volumes:
      - ./etc/telegraf:/etc/telegraf:ro
      - /:/hostfs:ro
    environment:
      - HOST_PROC
      - HOST_ETC
      - HOST_SYS
      - HOST_VAR
      - HOST_RUN
      - HOST_MOUNT_PREFIX
    restart: always
    ports:
      - "8092:8092" # UDP
      - "8094:8094" # TCP
    networks:
      - default
    # depends_on:
    #     - influxdb
    #     - mosquitto

  grafana:
    image: grafana/grafana-oss:10.0.3-ubuntu
    container_name: grafana
    hostname: grafana
    user: ${TIG_USER_ID}:${TIG_GROUP_ID}
    restart: always
    volumes:
      - ./var/lib/grafana:/var/lib/grafana:rw
      - ./etc/grafana:/etc/grafana:ro
    # depends_on:
    #   - influxdb
    ports:
      - "80:3000"
    networks:
      - default

networks:
  default:
    name: tig_network

# 2020. 07. 16. (목) 04:16:47 KST
# tig라는 쉘 스크립트에서 TIG_GROUP_ID TIG_USER_ID를 id -g, id -u로 설정하도록
# 만들었다.
#
# 2019년 10월 10일
#
# user: ${UGID}로 안되는 경우도 있다. 위의 influxdb가 그런 경우로 컨테이너 내의
# 기본 사용자 설정이 root:root가 기본인데 이를 바꾸는 것이 불가능하였다.
#
# user: 설정을 해도 volumes에서 기술한 ./influxdb/ 폴더 소유권은 root:root라서
# user:로 건넨 uid:gid의 우선 순위가 그 보다 낮으면 ./influxdb/ 즉 컨테이너
# 내부에서는 /var/lib/influxdb인 폴더 아래에 새로운 파일이나 폴더를 만들 수가
# 없었다.
#
# 결국 (1) user: 설정을 없애고 - 기본인 root:root를 소유자가 되고 (2)
# ./influxdb/ 폴더를 자동으로 만들지 않고 ${UGID} 소유자로 만들었다.  (3) 인터넷
# 검색에서 volumes: 옵션 값을 적을 때 맨 마지막에 Z라는 값을 적어서 풀었다는
# 기록이 있어 따라해 보았는데 어데다 쓰는 것인지 모르고 있다.
#
# 어쨌거나 허가 거부 문제는 멈추었으나 제대로 이해하고 풀어낸 것이 아니기때문에
# 꼼수다.
#
# 제대로 풀려면 다시 꺼내어 분석하고 실험해서 이런 문제에 대한 일반해를 구해야
# 한다.
#
### 2019년 10월 9일 해법
#
# 아래 두 문제 해결
#
# volumes 연결에서 권한 설정 문제 - user:에서 uid:gid를 설정하지 않은 경우
# volumes에 지정한 폴더 권한이 root:root로 지정되어 컨테이너 실행 중에
# 허가(Permission) 거부 문제가 생김 - 호스트 사용자와 컨테이너 사용자를
# 일치시키는 방식으로 해결
#
# networks (links) 문제 - 컨테이너를 연결할 때 옛 판에서는 docker 명령에서
# --link <컨테이너 이름> docker-compose의 경우 yml 파일에서 links: <컨테이너
# 이름> - 새 판에서는 networks 설정으로 해결하기를 권장
#
# 그 사이에서 nodered.org 설명이 훨씬 더 충실해 졌으나 여러 컨테이너 네트워크
# 연결 부분은 별 차이 없다.
#

### 2019년 9월 26일: 아래는 기록으로 보존 (나중에 지워도 됨)
#
# 흔히 컨테이너 내부의 사용자 설정은 기본이 아래와 같다.
#
# user: root:root
#
# node-red에서 작업한 데이터를 보존하려면 외부 폴더인 ./node-red를 컨테이너 속
# /data 폴더에 마운트해야 하는데 사용자 권한 문제로 파일이 복사 되지를 않아서
# 사용자를 root로 (최대 권한으로) 설정하여 어물쩍 넘어갔지만 제대로 된 해법은
# 아닐 듯.
#
# https://nodered.org/docs/getting-started/docker
#
# 위 사이트를 보면 알 수 있지만 Node-RED 개발자가 docker를 어설프게 쓰는 듯
# 싶다. 다른 설명도 그다지 충실하지는 않지만.
#
# 특히 broker를 연결할 때 컨테이너의 IP는 docker 데몬의 내부 공간에서 쓰는 가상
# IP이기 때문에 link 옵션으로 두 컨테이너를 붙여 보려 하였으나 실패.
#
# docker inspect mqtt_broker 명령으로 broker에 할당된 내부 가상 IP를 알아내어
# 1883 포트로 붙이면 잘 된다. 하지만 이 또한 꽁수.
#
